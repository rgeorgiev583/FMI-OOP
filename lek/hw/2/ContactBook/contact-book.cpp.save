/*
 * contact-book.cpp
 *
 *  Created on: 14.06.2014
 *      Author: radoslav
 */

#include "contact-book.h"

void ContactBook::copy(const ContactBook& other)
{
	size_t length = other.by_id.size();

	Id* id = (Id*) other.by_id.begin_keys();
	Contact** contact = (Contact**) other.by_id.begin_values();

	for (size_t i = 0; i < length && id && contact; i++)
	{
		if (*contact)
			by_id[*id] = new Contact(**contact);

		id++;
		contact++;
	}

	Name* name = (Name*) other.by_name.begin_keys();
	contact = (Contact**) other.by_name.begin_values();

	for (size_t i = 0; i < length && name && contact; i++)
	{
		if (*contact)
			by_name[*name] = by_id[(*contact)->getId()];

		name++;
		contact++;
	}

	PhoneNumber* phone_number =
			(PhoneNumber*) other.by_phone_number.begin_keys();
	contact = (Contact**) other.by_phone_number.begin_values();

	for (size_t i = 0; i < length && phone_number && contact; i++)
	{
		if (*contact)
			by_phone_number[*phone_number] = by_id[(*contact)->getId()];

		phone_number++;
		contact++;
	}
}

void ContactBook::destroy()
{
	size_t length = by_id.size();
	Contact** contact = (Contact**) by_id.begin_values();

	for (size_t i = 0; i < length && contact; i++)
	{
		if (*contact)
			delete *contact;

		contact++;
	}
}

ContactBook::ContactBook() {}

ContactBook::ContactBook(const ContactBook& other)
{
	copy(other);
}

ContactBook& ContactBook::operator=(const ContactBook& other)
{
	if (&other != this)
	{
		destroy();
		copy(other);
	}

	return *this;
}

ContactBook::~ContactBook()
{
	destroy();
}

Contact ContactBook::findContact(
		const string& cf, CONTACT_FIELD_TYPE cft = NAME) const
{
	const Contact* const* contact;

	switch (cft)
	{
	case NAME:
		contact = by_name.find(cf);
		break;

	case PHONE_NUMBER:
		contact = by_phone_number.find(cf);
		break;

	case ID:
		contact = by_id.find(cf);
	}

	return contact && *contact ? **contact : Contact();
}

Contact ContactBook::findContact(const Name& name) const
{
	const Contact* const* contact = by_name.find(name);
	return contact && *contact ? **contact : Contact();
}

Contact ContactBook::findContact(const PhoneNumber& phone_number) const
{
	const Contact* const* contact = by_phone_number.find(phone_number);
	return contact && *contact ? **contact : Contact();
}

Contact ContactBook::findContact(const Id& id) const
{
	const Contact* const* contact = by_id.find(id);
	return contact && *contact ? **contact : Contact();
}

void ContactBook::addContact(const Contact& c)
{
	if (!by_id.find(c.getId()) && !by_phone_number.find(c.getPhoneNumber()))
	{
		Contact* contact = new Contact(c);
		by_name[c.getName()] = contact;
		by_phone_number[c.getPhoneNumber()] = contact;
		by_id[c.getId()] = contact;
	}
}

void ContactBook::addContact(
		const Name& name, const PhoneNumber& phone_number, const Id& id)
{
	if (!by_id.find(id) && !by_phone_number.find(phone_number))
	{
		Contact* contact = new Contact(name, phone_number, id);
		by_name[name] = contact;
		by_phone_number[phone_number] = contact;
		by_id[id] = contact;
	}
}

bool ContactBook::removeContact(const string& cf, CONTACT_FIELD_TYPE cft = NAME)
{
	switch (cft)
	{
	case NAME:
		return removeContact(Name(cf));

	case PHONE_NUMBER:
		return removeContact(PhoneNumber(cf));

	case ID:
		return removeContact(Id(cf));
	}

	return false;
}

bool ContactBook::removeContact(const Name& name)
{
	Contact **contact_by_name, **contact_by_phone_number, **contact_by_id;
	contact_by_name = by_name.find(name);

	if (contact_by_name && *contact_by_name)
	{
		contact_by_phone_number =
				by_phone_number.find((*contact_by_name)->getPhoneNumber());
		contact_by_id = by_id.find((*contact_by_name)->getId());

		
		
		if (contact_by_phone_number && *contact_by_phone_number &&
				contact_by_id && *contact_by_id)
		{
			Contact* contact = *contact_by_name;
			by_name.erase(contact_by_name);
			by_phone_number.erase(contact_by_phone_number);
			by_id.erase(contact_by_id);
			delete contact;
			return true;
		}
		else
			return false;
	}
	else
		return false;
}

bool ContactBook::removeContact(const PhoneNumber& phone_number)
{
	Contact **contact_by_name, **contact_by_phone_number, **contact_by_id;
	contact_by_phone_number = by_phone_number.find(phone_number);

	if (contact_by_phone_number && *contact_by_phone_number)
	{
		contact_by_name = by_name.find((*contact_by_phone_number)->getName());
		contact_by_id = by_id.find((*contact_by_phone_number)->getId());

		if (contact_by_name && *contact_by_name &&
				contact_by_id && *contact_by_id)
		{
			Contact* contact = *contact_by_phone_number;
			by_name.erase(contact_by_name);
			by_phone_number.erase(contact_by_phone_number);
			by_id.erase(contact_by_id);
			delete contact;
			return true;
		}
		else
			return false;
	}
	else
		return false;
}

bool ContactBook::removeContact(const Id& id)
{
	Contact **contact_by_name, **contact_by_phone_number, **contact_by_id;
	contact_by_id = by_id.find(id);

	if (contact_by_id && *contact_by_id)
	{
		contact_by_name = by_name.find((*contact_by_id)->getName());
		contact_by_phone_number =
				by_phone_number.find((*contact_by_id)->getPhoneNumber());

		if (contact_by_name && *contact_by_name &&
				contact_by_phone_number && *contact_by_phone_number)
		{
			Contact* contact = *contact_by_id;
			by_name.erase(contact_by_name);
			by_phone_number.erase(contact_by_phone_number);
			by_id.erase(contact_by_id);
			delete contact;
			return true;
		}
		else
			return false;
	}
	else
		return false;
}

void ContactBook::print(ostream& os = cout, CONTACT_FIELD_TYPE cft = NAME) const
{
	switch (cft)
	{
	case NAME:
		by_name.printValues(os);
		break;

	case PHONE_NUMBER:
		by_phone_number.printValues(os);
		break;

	case ID:
		by_id.printValues(os);
	}
}

ostream& operator<<(ostream& os, const ContactBook& cb)
{
	cb.print(os);
	return os;
}
