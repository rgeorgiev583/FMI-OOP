#include <iostream>
#include <cstring>
#include "album.h"

void Album::setTitle(const char* _title)
{
    if (!_title || !strlen(_title))
    {
        std::cerr << "ERROR: No album title specified." << std::endl;
        strcpy(title, "(Unknown title)");
    }
    else if (strlen(_title) < 100)
        strcpy(title, _title);
    else
    {
        std::cerr << "ERROR: Album title specified is too long." << std::endl;
        strcpy(title, "(Title too long)");
    }
}

LinkedListIterator<Song> Album::base_findSong(const char* title) const
{
    LinkedListIterator<Song> i = songlist.begin();

    while (i != songlist.end() && strcmp(i->getTitle(), title))
        i++;

    return i;
}

Album::Album()
{
    strcpy(title, "(Unknown title)");
}

Album::Album(char* _title)
{
    setTitle(_title);
}

Album::Album(char* _title, const LinkedList<Song>& _songlist): songlist(_songlist)
{
    setTitle(_title);
}

size_t Album::getLength() const
{
    size_t albumlength = 0;

    for (LinkedListIterator<Song> i = songlist.begin(); i != songlist.end(); i++)
        albumlength += i->getLength();

    return albumlength;
}

const char* Album::getArtist() const
{
    char* artist = new char[100];
    strcpy(artist, songlist.front().getArtist());
    LinkedListIterator<Song> i = songlist.begin();

    do
        i++;
    while (i != songlist.end() && !strcmp(artist, i->getArtist()));

    if (i != songlist.end())
        strcpy(artist, "Various Artists");

    return artist;
}

const Song* Album::findSong(const char* title) const
{
    return base_findSong(title);
}

void Album::appendSong(const Song& song)
{
    songlist.push_back(song);
}

void Album::deleteSong(const char* title)
{
    LinkedListIterator<Song> song = base_findSong(title);

    if (song != songlist.end())
        songlist.erase(song);
}

void Album::deleteSong(const Song& song)
{
    LinkedListIterator<Song> i = songlist.begin();

    while (i != songlist.end() && *i != song)
        i++;

    if (*i == song)
        songlist.erase(i);
}

void Album::deleteDuplicates()
{
size_t ni=0;

    for (LinkedListIterator<Song> i = songlist.begin(); i != songlist.end() && i + 1 != songlist.end(); i++){size_t nj=ni+1;
        for (LinkedListIterator<Song> j = i + 1; j != songlist.end(); j != songlist.end() && j++){
            if (*i == *j)
            {
                std::cout << "DEBUG: (match) " << ni << " " << nj << std::endl;
                std::cout << "DEBUG: " << j->getTitle() << std::endl;
                j = songlist.erase(j);
                std::cout << "DEBUG: " << songlist.back().getTitle() << std::endl;
                std::cout << "ASSERT: " << (j == songlist.end()) << std::endl;
            }
            std::cout << "DEBUG: " << ni << " " << nj << std::endl;
            nj++;
            std::cout << " DEBUG: " << ni << " " << nj << std::endl;
        }
        ni++;
        std::cout << "  DEBUG: " << ni << " " << nj << std::endl;
    }
}

void Album::detectAndRedirectCovers(const Album& other)
{
    bool iscover = false;

    for (LinkedListIterator<Song> i = songlist.begin(); i != songlist.end(); i++)
    {
        const Song* found = other.findSong(i->getTitle());
        iscover = found && found->getArtist() != i->getArtist() && found->getYear() < i->getYear();
    }

    if (iscover)
        for (LinkedListIterator<Song> i = songlist.begin(); i != songlist.end(); i++)
        {
            Song* found = other.findSong(i->getTitle());

            if (found && found->getArtist() != i->getArtist() && found->getYear() < i->getYear())
                i->setOriginal(found);
        }
}

void Album::print() const
{
    std::cout << std::endl;
    std::cout << "----------------------------------------" << std::endl;
    std::cout << "Album title: " << title << std::endl;
    std::cout << "----------------------------------------" << std::endl;

    for (LinkedListIterator<Song> i = songlist.begin(); i != songlist.end(); i++)
        i->print();

    std::cout << "----------------------------------------" << std::endl;
    std::cout << std::endl;
}
